# -*- coding: utf-8 -*-
"""Retail_Sales_Exploratoratory Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BgzamZif_Z7--YlSvXcPyaXZUJfOkQyH
"""

# ============================================================
# Advanced Retail Sales EDA (Superstore Dataset)
# Author: ChatGPT (Extended for Resume-Quality Project)
# Purpose: Full EDA
# Dataset filename expected: 'SampleSuperstore.csv'
# ============================================================

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ---------------- 0. CONFIG ----------------
sns.set_style('whitegrid')
pd.set_option('display.max_columns', None)
OUTPUT_DIR = "eda_outputs"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# ---------------- 1. LOAD DATA ----------------
file_name = 'SampleSuperstore.csv'
df = pd.read_csv(file_name)

# Normalize column names
df.columns = [c.strip().lower().replace(' ', '_') for c in df.columns]

# ---------------- 2. INITIAL CLEANING ----------------
# Drop exact duplicates
df = df.drop_duplicates()

# Handle missing values
if df.isnull().sum().sum() > 0:
    df = df.fillna({
        col: df[col].median() if df[col].dtype != "O" else df[col].mode()[0]
        for col in df.columns
    })

print("\nMissing values (after handling):")
print(df.isnull().sum())

# Convert dates if present
if 'order_date' in df.columns:
    df['order_date'] = pd.to_datetime(df['order_date'], errors='coerce')
if 'ship_date' in df.columns:
    df['ship_date'] = pd.to_datetime(df['ship_date'], errors='coerce')

# Convert numeric
for col in ['sales', 'profit', 'quantity', 'discount']:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')

# ---------------- 3. FEATURE ENGINEERING ----------------
if 'order_date' in df.columns:
    df['year'] = df['order_date'].dt.year
    df['month'] = df['order_date'].dt.month
    df['weekday'] = df['order_date'].dt.day_name()
    df['quarter'] = df['order_date'].dt.to_period('Q')

if {'sales', 'profit'}.issubset(df.columns):
    df['profit_margin'] = np.where(df['sales'] == 0, np.nan, df['profit'] / df['sales'])

if {'ship_date', 'order_date'}.issubset(df.columns):
    df['ship_delay_days'] = (df['ship_date'] - df['order_date']).dt.days

if 'discount' in df.columns:
    df['discount_bucket'] = pd.cut(df['discount'], bins=[-0.01,0.2,0.5,1], labels=["Low","Medium","High"])

# ---------------- 4. DATASET OVERVIEW ----------------
print("\nDataset shape:", df.shape)
print("\nData types:")
print(df.dtypes)
print("\nSummary statistics (numerical):")
print(df.describe().T)

# ---------------- 5. OUTLIER DETECTION (IQR + BOXPLOT) ----------------
num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
print("\nIQR for numerical columns:")

for c in num_cols:
    q1 = df[c].quantile(0.25)
    q3 = df[c].quantile(0.75)
    iqr = q3 - q1
    lower = q1 - 1.5 * iqr
    upper = q3 + 1.5 * iqr
    outliers = df[(df[c] < lower) | (df[c] > upper)]
    print(f"{c}: Q1={q1:.3f}, Q3={q3:.3f}, IQR={iqr:.3f}, Outliers={len(outliers)}")

    # Boxplot visualization
    plt.figure(figsize=(6,4))
    sns.boxplot(x=df[c], color="skyblue")
    plt.title(f"Boxplot of {c} with Outliers")
    plt.show()

# ---------------- 6. CORRELATION ANALYSIS ----------------
if len(num_cols) >= 2:
    plt.figure(figsize=(10,6))
    sns.heatmap(df[num_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
    plt.title("Correlation Heatmap (Numerical Features)")
    plt.show()

# ---------------- 7. PROBABILITY DISTRIBUTIONS ----------------
# Normal Distribution check for Sales & Profit
if 'sales' in df.columns:
    plt.figure(figsize=(8,5))
    sns.histplot(df['sales'], bins=50, kde=True, color='skyblue')
    plt.title("Sales Distribution with Normal Fit")
    plt.xlabel("Sales")
    plt.ylabel("Frequency")
    plt.show()

if 'profit' in df.columns:
    plt.figure(figsize=(8,5))
    sns.histplot(df['profit'], bins=50, kde=True, color='orange')
    plt.title("Profit Distribution with Normal Fit")
    plt.xlabel("Profit")
    plt.ylabel("Frequency")
    plt.show()

# Binomial Distribution: Profitable vs Loss-making orders
if 'profit' in df.columns:
    df['profitable_flag'] = np.where(df['profit'] > 0, 1, 0)
    p_hat = df['profitable_flag'].mean()
    n = len(df)
    print(f"\nBinomial Model: Success = Profitable order, p̂ = {p_hat:.3f}, n = {n}")
    plt.figure(figsize=(8,5))
    counts = df['profitable_flag'].value_counts(normalize=True)
    sns.barplot(x=counts.index, y=counts.values, palette='Set2')
    plt.xticks([0,1],["Loss","Profit"])
    plt.title("Observed Probability of Profit vs Loss (Binomial)")
    plt.ylabel("Proportion")
    plt.show()

# Poisson Distribution: Number of Orders per Day
if 'order_date' in df.columns:
    orders_per_day = df.groupby('order_date').size()
    lam = orders_per_day.mean()
    print(f"\nPoisson Model: λ (mean orders/day) = {lam:.2f}")
    plt.figure(figsize=(8,5))
    sns.histplot(orders_per_day, bins=30, kde=False, color='green')
    plt.title("Distribution of Orders per Day vs Poisson Approximation")
    plt.xlabel("Orders per Day")
    plt.ylabel("Frequency")
    plt.show()

# ---------------- 8. BOXPLOTS ----------------
if 'category' in df.columns and 'sales' in df.columns:
    plt.figure(figsize=(8,6))
    sns.boxplot(x='category', y='sales', data=df, showfliers=True)
    plt.title('Boxplot of Sales by Category')
    plt.show()

if 'region' in df.columns and 'profit' in df.columns:
    plt.figure(figsize=(8,6))
    sns.boxplot(x='region', y='profit', data=df, showfliers=True)
    plt.title('Boxplot of Profit by Region')
    plt.show()

# ---------------- 9. INFERENTIAL STATISTICS ----------------
# Manual ANOVA on Profit by Region
if 'region' in df.columns and 'profit' in df.columns:
    groups = [df.loc[df['region']==r, 'profit'].dropna().values for r in df['region'].dropna().unique()]
    groups = [g for g in groups if len(g) > 1]
    if len(groups) >= 2:
        all_vals = np.concatenate(groups)
        grand_mean = all_vals.mean()
        ss_between = sum(len(g) * (g.mean() - grand_mean)**2 for g in groups)
        ss_within = sum(((g - g.mean())**2).sum() for g in groups)
        df_between = len(groups) - 1
        df_within = len(all_vals) - len(groups)
        ms_between = ss_between / df_between if df_between>0 else np.nan
        ms_within = ss_within / df_within if df_within>0 else np.nan
        F = ms_between / ms_within if ms_within and ms_within>0 else np.nan
        eta2 = ss_between / (ss_between + ss_within) if (ss_between + ss_within) > 0 else np.nan
        print("\nManual ANOVA on Profit by Region")
        print("F-statistic:", F)
        print("Eta-squared (effect size):", eta2)

# ---------------- 10. BUSINESS INSIGHTS ----------------
print("\n10) Core Business Insights")

# 1. Profit margin by category
if {"category","profit_margin"}.issubset(df.columns):
    print(df.groupby("category")["profit_margin"].mean())

# 2. Discount vs Profit
if {"discount","profit"}.issubset(df.columns):
    plt.figure(figsize=(7,5))
    sns.scatterplot(x="discount", y="profit", data=df, alpha=0.5)
    plt.title("Discount vs Profit")
    plt.show()

# 3. Top performing states by sales
if "state" in df.columns:
    top_states = df.groupby("state")["sales"].sum().sort_values(ascending=False).head(5)
    print(" - Top 5 States by Sales:\n", top_states)

# 4. Shipping mode preference
if "ship_mode" in df.columns:
    ship_mode_sales = df.groupby("ship_mode")["sales"].sum().sort_values(ascending=False)
    print("\n - Sales contribution by Shipping Mode:\n", ship_mode_sales)

# 5. Region-wise profitability
if {"region","profit"}.issubset(df.columns):
    region_profit = df.groupby("region")["profit"].sum().sort_values(ascending=False)
    print("\n - Profit by Region:\n", region_profit)

# 6. Sub-category insights
if "sub_category" in df.columns:
    top_sub_sales = df.groupby("sub_category")["sales"].sum().sort_values(ascending=False).head(5)
    top_sub_profit = df.groupby("sub_category")["profit"].sum().sort_values(ascending=False).head(5)
    print("\n - Top 5 Sub-Categories by Sales:\n", top_sub_sales)
    print("\n - Top 5 Sub-Categories by Profit:\n", top_sub_profit)

# 7. Yearly growth
if "year" in df.columns:
    yearly_stats = df.groupby("year")[["sales","profit"]].sum()
    yearly_stats["profit_margin"] = yearly_stats["profit"] / yearly_stats["sales"]
    print("\n - Yearly Sales & Profit Growth:\n", yearly_stats)

# 8. Top customers
if "customer_id" in df.columns:
    customer_sales = df.groupby("customer_id")["sales"].sum().sort_values(ascending=False).head(5)
    print("\n - Top 5 Customers by Sales:\n", customer_sales)

# 9. High discount → high loss
if {"discount","profit"}.issubset(df.columns):
    loss_discount = df[df["profit"] < 0].groupby("discount_bucket")["profit"].mean()
    print("\n - Average Loss by Discount Bucket:\n", loss_discount)

print("\n Full Retail Sales EDA complete.")